# HG changeset patch
# User Doug Simon <doug.simon@oracle.com>
# Date 1605118928 -3600
#      Wed Nov 11 19:22:08 2020 +0100
# Node ID cdaa90c7734a9189706f9295f37aa30c4a4d8fa6
# Parent  a1f02af919044fed5b14dfcdf41cefa4693f8e31
8251397: NPE on ClassValue.ClassValueMap.cacheArray

diff -r a1f02af91904 -r cdaa90c7734a src/share/classes/java/lang/ClassValue.java
--- a/src/share/classes/java/lang/ClassValue.java	Wed Oct 21 21:25:36 2020 +0000
+++ b/src/share/classes/java/lang/ClassValue.java	Wed Nov 11 19:22:08 2020 +0100
@@ -30,6 +30,8 @@
 import java.lang.ref.WeakReference;
 import java.util.concurrent.atomic.AtomicInteger;
 
+import sun.misc.Unsafe;
+
 import static java.lang.ClassValue.ClassValueMap.probeHomeLocation;
 import static java.lang.ClassValue.ClassValueMap.probeBackupLocations;
 
@@ -370,12 +372,22 @@
     }
 
     private static final Object CRITICAL_SECTION = new Object();
+    private static final Unsafe UNSAFE = Unsafe.getUnsafe();
     private static ClassValueMap initializeMap(Class<?> type) {
         ClassValueMap map;
         synchronized (CRITICAL_SECTION) {  // private object to avoid deadlocks
             // happens about once per type
-            if ((map = type.classValueMap) == null)
-                type.classValueMap = map = new ClassValueMap(type);
+            if ((map = type.classValueMap) == null) {
+                map = new ClassValueMap(type);
+                // Place a Store fence after construction and before publishing to emulate
+                // ClassValueMap containing final fields. This ensures it can be
+                // published safely in the non-volatile field Class.classValueMap,
+                // since stores to the fields of ClassValueMap will not be reordered
+                // to occur after the store to the field type.classValueMap
+                UNSAFE.storeFence();
+
+                type.classValueMap = map;
+            }
         }
             return map;
         }
