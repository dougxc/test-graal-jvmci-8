# HG changeset patch
# User Peter Hofer <peter.hofer@oracle.com>
# Date 1581425539 -3600
#      Tue Feb 11 13:52:19 2020 +0100
# Node ID 56b431c3a631fe994c18953c56d19fb14ef882fb
# Parent  3560e0ebe876ce658c5261070fe728e47994210f
Build static libraries.

diff -r 3560e0ebe876 -r 56b431c3a631 make/BuildJdk.gmk
--- a/make/BuildJdk.gmk	Mon Sep 16 18:07:13 2019 +0100
+++ b/make/BuildJdk.gmk	Tue Feb 11 13:52:19 2020 +0100
@@ -99,6 +99,7 @@
 # in these cases.
 images:
 	+$(MAKE) PROFILE="" -f CreateJars.gmk
+	+$(MAKE) PROFILE="" -f StaticLibs.gmk
 	+$(MAKE) PROFILE="" -f Images.gmk
         ifeq ($(OPENJDK_TARGET_OS), macosx)
 	  +$(MAKE) -f Bundles.gmk
diff -r 3560e0ebe876 -r 56b431c3a631 make/StaticLibs.gmk
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/make/StaticLibs.gmk	Tue Feb 11 13:52:19 2020 +0100
@@ -0,0 +1,64 @@
+#
+# Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+#
+# This code is free software; you can redistribute it and/or modify it
+# under the terms of the GNU General Public License version 2 only, as
+# published by the Free Software Foundation.  Oracle designates this
+# particular file as subject to the "Classpath" exception as provided
+# by Oracle in the LICENSE file that accompanied this code.
+#
+# This code is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+# version 2 for more details (a copy is included in the LICENSE file that
+# accompanied this code).
+#
+# You should have received a copy of the GNU General Public License version
+# 2 along with this work; if not, write to the Free Software Foundation,
+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+#
+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+# or visit www.oracle.com if you need additional information or have any
+# questions.
+#
+
+include $(SPEC)
+include MakeBase.gmk
+include JavaCompilation.gmk
+include Setup.gmk
+
+default: jdk-static-libs
+
+ifeq ($(STATIC_BUILD),true)
+JDK_STATIC_LIB_TARGETS = $(JDK_OUTPUTDIR)/lib/$(LIBRARY_PREFIX)java$(STATIC_LIBRARY_SUFFIX) \
+                  $(JDK_OUTPUTDIR)/lib/$(LIBRARY_PREFIX)net$(STATIC_LIBRARY_SUFFIX) \
+                  $(JDK_OUTPUTDIR)/lib/$(LIBRARY_PREFIX)nio$(STATIC_LIBRARY_SUFFIX) \
+                  $(JDK_OUTPUTDIR)/lib/$(LIBRARY_PREFIX)zip$(STATIC_LIBRARY_SUFFIX) \
+                  $(JDK_OUTPUTDIR)/lib/$(LIBRARY_PREFIX)fdlibm$(STATIC_LIBRARY_SUFFIX) \
+                  $(JDK_OUTPUTDIR)/lib/$(LIBRARY_PREFIX)jaas$(STATIC_LIBRARY_SUFFIX) \
+                  $(JDK_OUTPUTDIR)/lib/$(LIBRARY_PREFIX)sunec$(STATIC_LIBRARY_SUFFIX)
+
+# Restrict targets for libsctp same as NioLibraries.gmk
+ifeq ($(OPENJDK_TARGET_OS_API), posix)
+  ifeq (, $(filter $(OPENJDK_TARGET_OS), macosx aix))
+    JDK_STATIC_LIB_TARGETS += \
+                  $(JDK_OUTPUTDIR)/lib/$(LIBRARY_PREFIX)sctp$(STATIC_LIBRARY_SUFFIX)
+  endif
+endif
+
+jdk-static-libs: $(JDK_STATIC_LIB_TARGETS)
+
+$(JDK_STATIC_LIB_TARGETS):
+	$(CD) $(JDK_OUTPUTDIR)/objs/lib$(patsubst $(LIBRARY_PREFIX)%,%,$(basename $(notdir $@))) && \
+	$(AR) $(AR_OUT_OPTION)$(LIBRARY_PREFIX)$(patsubst $(LIBRARY_PREFIX)%,%,$(basename $(notdir $@)))$(STATIC_LIBRARY_SUFFIX) *$(OBJ_SUFFIX)
+	$(CD) $(JDK_OUTPUTDIR)/objs/lib$(patsubst $(LIBRARY_PREFIX)%,%,$(basename $(notdir $@))) && \
+	$(CP) $(LIBRARY_PREFIX)$(patsubst $(LIBRARY_PREFIX)%,%,$(basename $(notdir $@)))$(STATIC_LIBRARY_SUFFIX) \
+$(JDK_OUTPUTDIR)/lib/$(LIBRARY_PREFIX)$(patsubst $(LIBRARY_PREFIX)%,%,$(basename $(notdir $@)))$(STATIC_LIBRARY_SUFFIX)
+
+else
+JDK_STATIC_LIB_TARGETS =
+
+jdk-static-libs:
+endif
+
diff -r 3560e0ebe876 -r 56b431c3a631 src/share/native/common/check_version.c
--- a/src/share/native/common/check_version.c	Mon Sep 16 18:07:13 2019 +0100
+++ b/src/share/native/common/check_version.c	Tue Feb 11 13:52:19 2020 +0100
@@ -27,7 +27,13 @@
 #include "jvm.h"
 
 JNIEXPORT jint JNICALL
+#ifdef STATIC_BUILD
+#define JNI_REQ_VERSION JNI_VERSION_1_8
+JNI_OnLoad_java(JavaVM *vm, void *reserved)
+#else
+#define JNI_REQ_VERSION JNI_VERSION_1_2
 JNI_OnLoad(JavaVM *vm, void *reserved)
+#endif
 {
     jint vm_version = JVM_GetInterfaceVersion();
     if (vm_version != JVM_INTERFACE_VERSION) {
@@ -35,10 +41,11 @@
         char buf[128];
         sprintf(buf, "JVM interface version mismatch: expecting %d, got %d.",
                 JVM_INTERFACE_VERSION, (int)vm_version);
-        (*vm)->GetEnv(vm, (void **)&env, JNI_VERSION_1_2);
+        (*vm)->GetEnv(vm, (void **)&env, JNI_REQ_VERSION);
         if (env) {
             (*env)->FatalError(env, buf);
         }
     }
-    return JNI_VERSION_1_2;
+    return JNI_REQ_VERSION;
 }
+
diff -r 3560e0ebe876 -r 56b431c3a631 src/share/native/java/net/net_util.c
--- a/src/share/native/java/net/net_util.c	Mon Sep 16 18:07:13 2019 +0100
+++ b/src/share/native/java/net/net_util.c	Tue Feb 11 13:52:19 2020 +0100
@@ -38,7 +38,13 @@
 }
 
 JNIEXPORT jint JNICALL
+#ifdef STATIC_BUILD
+#define JNI_REQ_VERSION JNI_VERSION_1_8
+JNI_OnLoad_net(JavaVM *vm, void *reserved)
+#else
+#define JNI_REQ_VERSION JNI_VERSION_1_2
 JNI_OnLoad(JavaVM *vm, void *reserved)
+#endif
 {
     JNIEnv *env;
     jclass iCls;
@@ -50,15 +56,15 @@
         if (JVM_InitializeSocketLibrary() < 0) {
             JNU_ThrowByName(env, "java/lang/UnsatisfiedLinkError",
                             "failed to initialize net library.");
-            return JNI_VERSION_1_2;
+            return JNI_REQ_VERSION;
         }
     }
     iCls = (*env)->FindClass(env, "java/lang/Boolean");
-    CHECK_NULL_RETURN(iCls, JNI_VERSION_1_2);
+    CHECK_NULL_RETURN(iCls, JNI_REQ_VERSION);
     mid = (*env)->GetStaticMethodID(env, iCls, "getBoolean", "(Ljava/lang/String;)Z");
-    CHECK_NULL_RETURN(mid, JNI_VERSION_1_2);
+    CHECK_NULL_RETURN(mid, JNI_REQ_VERSION);
     s = (*env)->NewStringUTF(env, "java.net.preferIPv4Stack");
-    CHECK_NULL_RETURN(s, JNI_VERSION_1_2);
+    CHECK_NULL_RETURN(s, JNI_REQ_VERSION);
     preferIPv4Stack = (*env)->CallStaticBooleanMethod(env, iCls, mid, s);
 
     /*
@@ -70,7 +76,7 @@
     platformInit();
     parseExclusiveBindProperty(env);
 
-    return JNI_VERSION_1_2;
+    return JNI_REQ_VERSION;
 }
 
 static int initialized = 0;
diff -r 3560e0ebe876 -r 56b431c3a631 src/share/native/java/util/zip/ZipFile.c
--- a/src/share/native/java/util/zip/ZipFile.c	Mon Sep 16 18:07:13 2019 +0100
+++ b/src/share/native/java/util/zip/ZipFile.c	Tue Feb 11 13:52:19 2020 +0100
@@ -55,6 +55,14 @@
 static int OPEN_READ = java_util_zip_ZipFile_OPEN_READ;
 static int OPEN_DELETE = java_util_zip_ZipFile_OPEN_DELETE;
 
+#ifdef STATIC_BUILD
+JNIEXPORT jint JNICALL
+JNI_OnLoad_zip(JavaVM *vm, void *reserved)
+{
+    return JNI_VERSION_1_8;
+}
+#endif
+
 JNIEXPORT void JNICALL
 Java_java_util_zip_ZipFile_initIDs(JNIEnv *env, jclass cls)
 {
diff -r 3560e0ebe876 -r 56b431c3a631 src/share/native/sun/security/ec/ECC_JNI.cpp
--- a/src/share/native/sun/security/ec/ECC_JNI.cpp	Mon Sep 16 18:07:13 2019 +0100
+++ b/src/share/native/sun/security/ec/ECC_JNI.cpp	Tue Feb 11 13:52:19 2020 +0100
@@ -35,6 +35,14 @@
 
 extern "C" {
 
+#ifdef STATIC_BUILD
+JNIEXPORT jint JNICALL
+JNI_OnLoad_sunec(JavaVM *vm, void *reserved)
+{
+    return JNI_VERSION_1_8;
+}
+#endif
+
 /*
  * Throws an arbitrary Java exception.
  */
diff -r 3560e0ebe876 -r 56b431c3a631 src/solaris/native/com/sun/security/auth/module/Unix.c
--- a/src/solaris/native/com/sun/security/auth/module/Unix.c	Mon Sep 16 18:07:13 2019 +0100
+++ b/src/solaris/native/com/sun/security/auth/module/Unix.c	Tue Feb 11 13:52:19 2020 +0100
@@ -36,6 +36,14 @@
 #include <stdlib.h>
 #include <string.h>
 
+#ifdef STATIC_BUILD
+JNIEXPORT jint JNICALL
+JNI_OnLoad_jaas(JavaVM *vm, void *reserved)
+{
+    return JNI_VERSION_1_8;
+}
+#endif
+
 JNIEXPORT void JNICALL
 Java_com_sun_security_auth_module_UnixSystem_getUnixInfo
                                                 (JNIEnv *env, jobject obj) {
diff -r 3560e0ebe876 -r 56b431c3a631 src/solaris/native/sun/nio/ch/FileChannelImpl.c
--- a/src/solaris/native/sun/nio/ch/FileChannelImpl.c	Mon Sep 16 18:07:13 2019 +0100
+++ b/src/solaris/native/sun/nio/ch/FileChannelImpl.c	Tue Feb 11 13:52:19 2020 +0100
@@ -51,6 +51,14 @@
 
 static jfieldID chan_fd;        /* jobject 'fd' in sun.io.FileChannelImpl */
 
+#ifdef STATIC_BUILD
+JNIEXPORT jint JNICALL
+JNI_OnLoad_nio(JavaVM *vm, void *reserved)
+{
+    return JNI_VERSION_1_8;
+}
+#endif
+
 JNIEXPORT jlong JNICALL
 Java_sun_nio_ch_FileChannelImpl_initIDs(JNIEnv *env, jclass clazz)
 {
diff -r 3560e0ebe876 -r 56b431c3a631 src/solaris/native/sun/nio/ch/sctp/SctpNet.c
--- a/src/solaris/native/sun/nio/ch/sctp/SctpNet.c	Mon Sep 16 18:07:13 2019 +0100
+++ b/src/solaris/native/sun/nio/ch/sctp/SctpNet.c	Tue Feb 11 13:52:19 2020 +0100
@@ -43,9 +43,16 @@
 static const char* nativeSctpLib = "libsctp.so.1";
 static jboolean funcsLoaded = JNI_FALSE;
 
-JNIEXPORT jint JNICALL JNI_OnLoad
-  (JavaVM *vm, void *reserved) {
-    return JNI_VERSION_1_2;
+JNIEXPORT jint JNICALL
+#ifdef STATIC_BUILD
+#define JNI_REQ_VERSION JNI_VERSION_1_8
+ JNI_OnLoad_sctp(JavaVM *vm, void *reserved)
+#else
+#define JNI_REQ_VERSION JNI_VERSION_1_2
+ JNI_OnLoad(JavaVM *vm, void *reserved)
+#endif
+{
+    return JNI_REQ_VERSION;
 }
 
 static int preCloseFD = -1;     /* File descriptor to which we dup other fd's
diff -r 3560e0ebe876 -r 56b431c3a631 src/windows/native/com/sun/security/auth/module/nt.c
--- a/src/windows/native/com/sun/security/auth/module/nt.c	Mon Sep 16 18:07:13 2019 +0100
+++ b/src/windows/native/com/sun/security/auth/module/nt.c	Tue Feb 11 13:52:19 2020 +0100
@@ -32,6 +32,14 @@
 #include <ntsecapi.h>
 #include <lmerr.h>
 
+#ifdef STATIC_BUILD
+JNIEXPORT jint JNICALL
+JNI_OnLoad_jaas(JavaVM *vm, void *reserved)
+{
+    return JNI_VERSION_1_8;
+}
+#endif
+
 static BOOL debug = FALSE;
 
 BOOL getToken(PHANDLE);
diff -r 3560e0ebe876 -r 56b431c3a631 src/windows/native/sun/nio/ch/FileChannelImpl.c
--- a/src/windows/native/sun/nio/ch/FileChannelImpl.c	Mon Sep 16 18:07:13 2019 +0100
+++ b/src/windows/native/sun/nio/ch/FileChannelImpl.c	Tue Feb 11 13:52:19 2020 +0100
@@ -38,6 +38,14 @@
 
 static jfieldID chan_fd; /* id for jobject 'fd' in java.io.FileChannel */
 
+#ifdef STATIC_BUILD
+JNIEXPORT jint JNICALL
+JNI_OnLoad_nio(JavaVM *vm, void *reserved)
+{
+    return JNI_VERSION_1_8;
+}
+#endif
+
 /**************************************************************
  * static method to store field ID's in initializers
  * and retrieve the allocation granularity
